{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFTestShekar"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Trgt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "adftest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csvtable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": "lkpexportcsvtables"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/delimited_csv_cars')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "input",
						"container": "cars-planes"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Make",
						"type": "String"
					},
					{
						"name": "Model",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Origin",
						"type": "String"
					},
					{
						"name": "DriveTrain",
						"type": "String"
					},
					{
						"name": "Length",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/deptCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dept.csv",
						"folderPath": "input",
						"container": "adftest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "deptno",
						"type": "String"
					},
					{
						"name": "ename",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/empcsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp.csv",
						"folderPath": "input",
						"container": "adftest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "enmae",
						"type": "String"
					},
					{
						"name": "cntry",
						"type": "String"
					},
					{
						"name": "dept",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/empdeptTarget')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "adftest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lkpcsvtable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "lkpexportcsvtables"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputFolderDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "adftest"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteAct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeletetxtFiles",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Deletetxt",
								"value": "Deletes Txt files from Output Folder"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "outputFolderDS",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"path": "adftest"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "*.txt",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-01T17:07:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/outputFolderDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Demo_untilActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('FileAvailable'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(activity('Get Metadata2').output.exists)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 120
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "FileAvailable",
													"value": "True"
												}
											}
										]
									}
								},
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "delimited_csv_cars",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "delimited_csv_cars",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTbl_cars",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"variables": {
					"FileAvailable": {
						"type": "String",
						"defaultValue": "False"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-06T13:29:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/delimited_csv_cars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Getmetadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "delimited_csv_cars",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\n\tformatDateTime(utcnow(),'yyyy-mm-dd'),\n\tactivity('Get Metadata1').formatDateTime(output.lastModified,'yyyy-mm-dd')\n\t)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "delimited_csv_cars",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@activity('Get Metadata1').output",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTbl_cars",
											"type": "DatasetReference",
											"parameters": {
												"tablename": "abcd"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.Param_wait",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Param_wait": {
						"type": "int",
						"defaultValue": 10
					},
					"FileName": {
						"type": "string",
						"defaultValue": "abcd.csv"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-06T13:29:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/delimited_csv_cars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_CarsCSVtoSQLDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyCarsCSVtoSQLDB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Append variable1",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "cars-planes/input/cars.csv"
							},
							{
								"name": "Destination",
								"value": "dbo.Cars"
							},
							{
								"name": "filename",
								"value": "@pipeline().parameters.filename"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "delimited_csv_cars",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTbl_cars",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "bkpdata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.@{pipeline().parameters.tablename}"
							},
							{
								"name": "Destination",
								"value": "cars-planes/input/@{concat(pipeline().parameters.tablename,utcnow(),'.csv')}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTbl_cars",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "delimited_csv_cars",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@concat(pipeline().parameters.tablename,utcnow(),'.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "bkpdata",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [
							{
								"name": "vars",
								"value": "filename"
							}
						],
						"typeProperties": {
							"variableName": "Temp",
							"value": {
								"value": "@pipeline().parameters.filename",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [
							{
								"name": "FIleName",
								"value": "@pipeline().parameters.filename"
							},
							{
								"name": "TableName",
								"value": "@pipeline().parameters.tablename"
							}
						],
						"typeProperties": {
							"variableName": "Append FIlenames",
							"value": {
								"value": "@pipeline().parameters.filename",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					}
				},
				"variables": {
					"Temp": {
						"type": "String"
					},
					"Append FIlenames": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-02T14:38:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/delimited_csv_cars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PassMetadataToNxtActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SrcCsvInput",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"FileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-09T17:16:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lkpDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TableList",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "LkpData",
								"value": "Lkp Used for TableList"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from shekarsqldb.INFORMATION_SCHeMA.TABLES WHERE table_type = 'BASE TABLE'\nand TABLE_NAME IN ('Cars','Movies','Countries')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TableList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "TableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [
							{
								"name": "Foreach",
								"value": "Give Values based on csv"
							}
						],
						"typeProperties": {
							"items": {
								"value": "@activity('TableList').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "exportTable",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SQLtable",
											"type": "DatasetReference",
											"parameters": {
												"Tablename": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"Schemaname": {
													"value": "@item().table_schema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "csvtable",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@concat(item().table_schema,'-',item().table_name,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-03T10:16:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csvtable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "adftest/input/test_csv.csv"
							},
							{
								"name": "Destination",
								"value": "adftest/output/test_csv.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Trgt",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "delimited_csv_cars",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.Filename",
										"type": "Expression"
									}
								}
							},
							"timeout": "0.12:00:00",
							"sleep": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-07T13:18:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Trgt')]",
				"[concat(variables('factoryId'), '/datasets/delimited_csv_cars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CachedSinkDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CarsSqlTbl",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "empcsv",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"name": "CachedMaxID"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          maxid as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select max(ID) as maxid from Cars',",
						"     format: 'query') ~> source1",
						"source(output(",
						"          empid as integer,",
						"          enmae as string,",
						"          cntry as string,",
						"          dept as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source2 keyGenerate(output(SK_EmpID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(empid = empid + CachedMaxID#outputs()[1].maxid) ~> derivedColumn1",
						"source1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          maxid",
						"     )) ~> CachedMaxID"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empcsv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Flatten_demo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json",
								"type": "DatasetReference"
							},
							"name": "JsonSrc"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLtable",
								"type": "DatasetReference"
							},
							"name": "JsonFltSink"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          iso3 as string,",
						"          iso2 as string,",
						"          numeric_code as string,",
						"          phone_code as string,",
						"          capital as string,",
						"          currency as string,",
						"          currency_name as string,",
						"          currency_symbol as string,",
						"          tld as string,",
						"          native as string,",
						"          region as string,",
						"          States as string[],",
						"          subregion as string,",
						"          timezones as (zoneName as string, gmtOffset as integer, gmtOffsetName as string, abbreviation as string, tzName as string)[],",
						"          translations as (kr as string, {pt-BR} as string, pt as string, nl as string, hr as string, fa as string, de as string, es as string, fr as string, ja as string, it as string, cn as string, tr as string),",
						"          latitude as string,",
						"          longitude as string,",
						"          emoji as string,",
						"          emojiU as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> JsonSrc",
						"JsonSrc foldDown(unroll(States),",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          iso3,",
						"          iso2,",
						"          numeric_code,",
						"          phone_code,",
						"          capital,",
						"          currency,",
						"          currency_name,",
						"          currency_symbol,",
						"          tld,",
						"          native,",
						"          region,",
						"          States,",
						"          subregion,",
						"          timezones,",
						"          translations,",
						"          latitude,",
						"          longitude,",
						"          emoji,",
						"          emojiU",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 select(mapColumn(",
						"          id,",
						"          name,",
						"          iso3,",
						"          iso2,",
						"          numeric_code,",
						"          phone_code,",
						"          capital,",
						"          currency,",
						"          currency_name,",
						"          currency_symbol,",
						"          tld,",
						"          native,",
						"          region,",
						"          States,",
						"          subregion,",
						"          latitude,",
						"          longitude,",
						"          emoji,",
						"          emojiU",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          iso3,",
						"          iso2,",
						"          numeric_code,",
						"          phone_code,",
						"          capital,",
						"          currency,",
						"          currency_name,",
						"          currency_symbol,",
						"          tld,",
						"          native,",
						"          region,",
						"          States,",
						"          subregion,",
						"          latitude,",
						"          longitude,",
						"          emoji,",
						"          emojiU",
						"     ),",
						"     partitionBy('hash', 1)) ~> JsonFltSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JoinEmpDeptCsvData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empcsv",
								"type": "DatasetReference"
							},
							"name": "empcsv"
						},
						{
							"dataset": {
								"referenceName": "deptCSV",
								"type": "DatasetReference"
							},
							"name": "dept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptTarget",
								"type": "DatasetReference"
							},
							"name": "OutputempDeptSink",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "empdeptinner"
						},
						{
							"name": "ModifyColumns1",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "RemoveColumns1",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          enmae as string,",
						"          cntry as string,",
						"          dept as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empcsv",
						"source(output(",
						"          deptno as string,",
						"          ename as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dept",
						"cast1, ModifyColumns1 join(dept == deptno,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'off')~> empdeptinner",
						"empcsv derive(enmae = upper(enmae)) ~> ModifyColumns1",
						"empdeptinner select(mapColumn(",
						"          empid,",
						"          enmae,",
						"          cntry,",
						"          dept,",
						"          deptno",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
						"dept cast(output(",
						"          deptno as integer",
						"     ),",
						"     errors: false) ~> cast1",
						"RemoveColumns1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['empDeptJoinResult'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          enmae,",
						"          cntry,",
						"          dept,",
						"          deptno",
						"     ),",
						"     partitionBy('hash', 1)) ~> OutputempDeptSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empcsv')]",
				"[concat(variables('factoryId'), '/datasets/deptCSV')]",
				"[concat(variables('factoryId'), '/datasets/empdeptTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SplitTransfrmtionDemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmpDataset",
								"type": "DatasetReference"
							},
							"name": "EmpSalcsv"
						},
						{
							"dataset": {
								"referenceName": "empcsv",
								"type": "DatasetReference"
							},
							"name": "empcsv"
						},
						{
							"dataset": {
								"referenceName": "DeptDataSetCsv",
								"type": "DatasetReference"
							},
							"name": "DeptDataSet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdeptTarget",
								"type": "DatasetReference"
							},
							"name": "MaleSink"
						},
						{
							"dataset": {
								"referenceName": "empdeptTarget",
								"type": "DatasetReference"
							},
							"name": "Femalesink"
						},
						{
							"dataset": {
								"referenceName": "empdeptTarget",
								"type": "DatasetReference"
							},
							"name": "PivotTrvlSink"
						},
						{
							"dataset": {
								"referenceName": "empdeptTarget",
								"type": "DatasetReference"
							},
							"name": "EmpSKSink"
						}
					],
					"transformations": [
						{
							"name": "SplitGender"
						},
						{
							"name": "ExpLevel"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "select1"
						},
						{
							"name": "pivotTrvl"
						},
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "SKEmp"
						},
						{
							"name": "select2"
						},
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as string,",
						"          Experience_Years as integer '000',",
						"          Age as integer '000',",
						"          Gender as string,",
						"          Salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EmpSalcsv",
						"source(output(",
						"          empid as string,",
						"          enmae as string,",
						"          cntry as string,",
						"          dept as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empcsv",
						"source(output(",
						"          ID as integer '000',",
						"          Dept_name as string,",
						"          location as string,",
						"          travel_required as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DeptDataSet",
						"EmpSalcsv split(equals(Gender, 'Male'),",
						"     equals(Gender, 'Female'),",
						"     disjoint: false) ~> SplitGender@(Male, Female)",
						"SplitGender@Male derive(ExpLevel = upper(iif(Experience_Years>=5, 'senior', 'Junior')),",
						"          Gender = upper(Gender)) ~> ExpLevel",
						"ExpLevel, empcsv lookup(ID == empid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 sort(asc(Age, true)) ~> sort1",
						"sort1 select(mapColumn(",
						"          ID,",
						"          Experience_Years,",
						"          Age,",
						"          Sex = Gender,",
						"          Salary,",
						"          ExpLevel",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"DeptDataSet pivot(groupBy(Dept_name),",
						"     pivotBy(travel_required),",
						"     TravelReq = count(ID),",
						"     columnNaming: '$N$V',",
						"     lateral: false) ~> pivotTrvl",
						"pivotTrvl derive(TravelReqno = toLong(byName('TravelReqno')),",
						"          TravelReqyes = toLong(byName('TravelReqyes'))) ~> MapDrifted1",
						"empcsv keyGenerate(output(SK_Emp as long),",
						"     startAt: 1000L,",
						"     stepValue: 1000L) ~> SKEmp",
						"SKEmp select(mapColumn(",
						"          SurrKey = SK_Emp,",
						"          enmae,",
						"          EmpID = empid,",
						"          Country = cntry,",
						"          dept",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select1 window(over(Experience_Years),",
						"     asc(Salary, true),",
						"     Dense_rnk = denseRank()) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['MaleEmpNew'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID,",
						"          Experience_Years,",
						"          Age,",
						"          Sex,",
						"          Salary,",
						"          ExpLevel,",
						"          Dense_rnk",
						"     ),",
						"     partitionBy('hash', 1)) ~> MaleSink",
						"SplitGender@Female sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FemaleEmp'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ID,",
						"          Experience_Years,",
						"          Age,",
						"          Gender,",
						"          Salary",
						"     ),",
						"     partitionBy('hash', 1)) ~> Femalesink",
						"MapDrifted1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['PivotTravelReq'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Dept_name,",
						"          TravelReqno,",
						"          TravelReqyes",
						"     ),",
						"     partitionBy('hash', 1)) ~> PivotTrvlSink",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['SK_Emp'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          SurrKey,",
						"          enmae,",
						"          EmpID,",
						"          Country,",
						"          dept",
						"     ),",
						"     partitionBy('hash', 1)) ~> EmpSKSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empcsv')]",
				"[concat(variables('factoryId'), '/datasets/empdeptTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_AlterRow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PlanesCSV",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PlanesSQLDBTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ICAO as string,",
						"          IATA as string,",
						"          MAKER as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 alterRow(deleteIf(MAKER=='Airbus'),",
						"     upsertIf(IATA=='11111')) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          ICAO as string,",
						"          IATA as string,",
						"          MAKER as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['ICAO'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ICAO,",
						"          IATA,",
						"          MAKER,",
						"          DESCRIPTION",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}